version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: ssi-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: ssi
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./backend/scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - ssi-network

  # MongoDB Express (Optional - for database management)
  mongo-express:
    image: mongo-express:latest
    container_name: ssi-mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password123
      ME_CONFIG_MONGODB_URL: mongodb://admin:password123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    ports:
      - "8081:8081"
    depends_on:
      - mongodb
    networks:
      - ssi-network

  # Redis (Optional - for session storage and caching)
  redis:
    image: redis:7-alpine
    container_name: ssi-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass redis123
    networks:
      - ssi-network

  # Backend API (Development)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: ssi-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      MONGO_URI: mongodb://admin:password123@mongodb:27017/ssi?authSource=admin
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      PINATA_KEY: ${PINATA_KEY}
      PINATA_SECRET: ${PINATA_SECRET}
      CONTRACT_ADDRESS: ${CONTRACT_ADDRESS}
      SEPOLIA_RPC: ${SEPOLIA_RPC}
      PORT: 4000
    ports:
      - "4000:4000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - mongodb
      - redis
    networks:
      - ssi-network
    command: npm run dev

  # Frontend (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: ssi-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:4000
      REACT_APP_CONTRACT_ADDRESS: ${CONTRACT_ADDRESS}
      REACT_APP_SEPOLIA_RPC: ${SEPOLIA_RPC}
      CHOKIDAR_USEPOLLING: true
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - ssi-network
    command: npm start

  # IPFS Node (Optional - local IPFS node)
  ipfs:
    image: ipfs/kubo:latest
    container_name: ssi-ipfs
    restart: unless-stopped
    ports:
      - "4001:4001"     # P2P port
      - "5001:5001"     # API port
      - "8080:8080"     # Gateway port
    volumes:
      - ipfs_data:/data/ipfs
    networks:
      - ssi-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  ipfs_data:
    driver: local

networks:
  ssi-network:
    driver: bridge

# Production override file: docker-compose.prod.yml
# Use: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
